// Code generated from parser/Vlang.g4 by ANTLR 4.13.2. DO NOT EDIT.

package compiler

import (
	"fmt"
	"github.com/antlr4-go/antlr/v4"
	"sync"
	"unicode"
)

// Suppress unused import error
var _ = fmt.Printf
var _ = sync.Once{}
var _ = unicode.IsLetter

type VlangLexer struct {
	*antlr.BaseLexer
	channelNames []string
	modeNames    []string
	// TODO: EOF string
}

var VlangLexerLexerStaticData struct {
	once                   sync.Once
	serializedATN          []int32
	ChannelNames           []string
	ModeNames              []string
	LiteralNames           []string
	SymbolicNames          []string
	RuleNames              []string
	PredictionContextCache *antlr.PredictionContextCache
	atn                    *antlr.ATN
	decisionToDFA          []*antlr.DFA
}

func vlanglexerLexerInit() {
	staticData := &VlangLexerLexerStaticData
	staticData.ChannelNames = []string{
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN",
	}
	staticData.ModeNames = []string{
		"DEFAULT_MODE",
	}
	staticData.LiteralNames = []string{
		"", "'println'", "'print'", "'fn'", "'struct'", "'int'", "'float'",
		"'string'", "'bool'", "'char'", "'void'", "'len'", "'cap'", "'append'",
		"'mut'", "", "", "", "", "", "", "", "'if'", "'else'", "'while'", "'for'",
		"'in'", "'return'", "'break'", "'continue'", "'+'", "'-'", "'*'", "'/'",
		"'%'", "'!'", "'||'", "'&&'", "'=='", "'!='", "'<'", "'<='", "'>'",
		"'>='", "'='", "'++'", "'--'", "':'", "'('", "')'", "'['", "'{'", "']'",
		"'}'", "'.'", "','",
	}
	staticData.SymbolicNames = []string{
		"", "", "", "", "", "", "", "", "", "", "", "LEN", "CAP", "APPEND",
		"MUT", "BOOLEANO", "ENTERO", "FLOAT", "DECIMAL", "CADENA", "CARACTER",
		"ID", "IF_KW", "ELSE_KW", "WHILE_KW", "FOR_KW", "IN_KW", "RETURN_KW",
		"BREAK_KW", "CONTINUE_KW", "PLUS", "MINUS", "MUL", "DIV", "MOD", "NOT",
		"OR", "AND", "EQ", "NEQ", "LT", "LE", "GT", "GE", "ASSIGN", "INC", "DEC",
		"COLON", "LPAREN", "RPAREN", "LBRACK", "LCOR", "RBRACK", "RCOR", "DOT",
		"COMMA", "WS", "LINE_COMMENT", "BLOCK_COMMENT",
	}
	staticData.RuleNames = []string{
		"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "T__8",
		"T__9", "LEN", "CAP", "APPEND", "MUT", "BOOLEANO", "ENTERO", "FLOAT",
		"DECIMAL", "CADENA", "CARACTER", "ID", "IF_KW", "ELSE_KW", "WHILE_KW",
		"FOR_KW", "IN_KW", "RETURN_KW", "BREAK_KW", "CONTINUE_KW", "PLUS", "MINUS",
		"MUL", "DIV", "MOD", "NOT", "OR", "AND", "EQ", "NEQ", "LT", "LE", "GT",
		"GE", "ASSIGN", "INC", "DEC", "COLON", "LPAREN", "RPAREN", "LBRACK",
		"LCOR", "RBRACK", "RCOR", "DOT", "COMMA", "WS", "LINE_COMMENT", "BLOCK_COMMENT",
	}
	staticData.PredictionContextCache = antlr.NewPredictionContextCache()
	staticData.serializedATN = []int32{
		4, 0, 58, 402, 6, -1, 2, 0, 7, 0, 2, 1, 7, 1, 2, 2, 7, 2, 2, 3, 7, 3, 2,
		4, 7, 4, 2, 5, 7, 5, 2, 6, 7, 6, 2, 7, 7, 7, 2, 8, 7, 8, 2, 9, 7, 9, 2,
		10, 7, 10, 2, 11, 7, 11, 2, 12, 7, 12, 2, 13, 7, 13, 2, 14, 7, 14, 2, 15,
		7, 15, 2, 16, 7, 16, 2, 17, 7, 17, 2, 18, 7, 18, 2, 19, 7, 19, 2, 20, 7,
		20, 2, 21, 7, 21, 2, 22, 7, 22, 2, 23, 7, 23, 2, 24, 7, 24, 2, 25, 7, 25,
		2, 26, 7, 26, 2, 27, 7, 27, 2, 28, 7, 28, 2, 29, 7, 29, 2, 30, 7, 30, 2,
		31, 7, 31, 2, 32, 7, 32, 2, 33, 7, 33, 2, 34, 7, 34, 2, 35, 7, 35, 2, 36,
		7, 36, 2, 37, 7, 37, 2, 38, 7, 38, 2, 39, 7, 39, 2, 40, 7, 40, 2, 41, 7,
		41, 2, 42, 7, 42, 2, 43, 7, 43, 2, 44, 7, 44, 2, 45, 7, 45, 2, 46, 7, 46,
		2, 47, 7, 47, 2, 48, 7, 48, 2, 49, 7, 49, 2, 50, 7, 50, 2, 51, 7, 51, 2,
		52, 7, 52, 2, 53, 7, 53, 2, 54, 7, 54, 2, 55, 7, 55, 2, 56, 7, 56, 2, 57,
		7, 57, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1,
		1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 2, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3,
		1, 3, 1, 4, 1, 4, 1, 4, 1, 4, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 6,
		1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 7, 1, 7, 1, 7, 1, 7, 1, 7, 1, 8,
		1, 8, 1, 8, 1, 8, 1, 8, 1, 9, 1, 9, 1, 9, 1, 9, 1, 9, 1, 10, 1, 10, 1,
		10, 1, 10, 1, 11, 1, 11, 1, 11, 1, 11, 1, 12, 1, 12, 1, 12, 1, 12, 1, 12,
		1, 12, 1, 12, 1, 13, 1, 13, 1, 13, 1, 13, 1, 14, 1, 14, 1, 14, 1, 14, 1,
		14, 1, 14, 1, 14, 1, 14, 1, 14, 3, 14, 202, 8, 14, 1, 15, 4, 15, 205, 8,
		15, 11, 15, 12, 15, 206, 1, 16, 4, 16, 210, 8, 16, 11, 16, 12, 16, 211,
		1, 16, 1, 16, 5, 16, 216, 8, 16, 10, 16, 12, 16, 219, 9, 16, 1, 16, 5,
		16, 222, 8, 16, 10, 16, 12, 16, 225, 9, 16, 1, 16, 1, 16, 4, 16, 229, 8,
		16, 11, 16, 12, 16, 230, 3, 16, 233, 8, 16, 1, 17, 4, 17, 236, 8, 17, 11,
		17, 12, 17, 237, 1, 17, 1, 17, 4, 17, 242, 8, 17, 11, 17, 12, 17, 243,
		1, 18, 1, 18, 1, 18, 1, 18, 5, 18, 250, 8, 18, 10, 18, 12, 18, 253, 9,
		18, 1, 18, 1, 18, 1, 19, 1, 19, 1, 19, 1, 19, 1, 20, 1, 20, 5, 20, 263,
		8, 20, 10, 20, 12, 20, 266, 9, 20, 1, 21, 1, 21, 1, 21, 1, 22, 1, 22, 1,
		22, 1, 22, 1, 22, 1, 23, 1, 23, 1, 23, 1, 23, 1, 23, 1, 23, 1, 24, 1, 24,
		1, 24, 1, 24, 1, 25, 1, 25, 1, 25, 1, 26, 1, 26, 1, 26, 1, 26, 1, 26, 1,
		26, 1, 26, 1, 27, 1, 27, 1, 27, 1, 27, 1, 27, 1, 27, 1, 28, 1, 28, 1, 28,
		1, 28, 1, 28, 1, 28, 1, 28, 1, 28, 1, 28, 1, 29, 1, 29, 1, 30, 1, 30, 1,
		31, 1, 31, 1, 32, 1, 32, 1, 33, 1, 33, 1, 34, 1, 34, 1, 35, 1, 35, 1, 35,
		1, 36, 1, 36, 1, 36, 1, 37, 1, 37, 1, 37, 1, 38, 1, 38, 1, 38, 1, 39, 1,
		39, 1, 40, 1, 40, 1, 40, 1, 41, 1, 41, 1, 42, 1, 42, 1, 42, 1, 43, 1, 43,
		1, 44, 1, 44, 1, 44, 1, 45, 1, 45, 1, 45, 1, 46, 1, 46, 1, 47, 1, 47, 1,
		48, 1, 48, 1, 49, 1, 49, 1, 50, 1, 50, 1, 51, 1, 51, 1, 52, 1, 52, 1, 53,
		1, 53, 1, 54, 1, 54, 1, 55, 4, 55, 372, 8, 55, 11, 55, 12, 55, 373, 1,
		55, 1, 55, 1, 56, 1, 56, 1, 56, 1, 56, 5, 56, 382, 8, 56, 10, 56, 12, 56,
		385, 9, 56, 1, 56, 1, 56, 1, 57, 1, 57, 1, 57, 1, 57, 5, 57, 393, 8, 57,
		10, 57, 12, 57, 396, 9, 57, 1, 57, 1, 57, 1, 57, 1, 57, 1, 57, 1, 394,
		0, 58, 1, 1, 3, 2, 5, 3, 7, 4, 9, 5, 11, 6, 13, 7, 15, 8, 17, 9, 19, 10,
		21, 11, 23, 12, 25, 13, 27, 14, 29, 15, 31, 16, 33, 17, 35, 18, 37, 19,
		39, 20, 41, 21, 43, 22, 45, 23, 47, 24, 49, 25, 51, 26, 53, 27, 55, 28,
		57, 29, 59, 30, 61, 31, 63, 32, 65, 33, 67, 34, 69, 35, 71, 36, 73, 37,
		75, 38, 77, 39, 79, 40, 81, 41, 83, 42, 85, 43, 87, 44, 89, 45, 91, 46,
		93, 47, 95, 48, 97, 49, 99, 50, 101, 51, 103, 52, 105, 53, 107, 54, 109,
		55, 111, 56, 113, 57, 115, 58, 1, 0, 6, 1, 0, 48, 57, 2, 0, 34, 34, 92,
		92, 3, 0, 65, 90, 95, 95, 97, 122, 4, 0, 48, 57, 65, 90, 95, 95, 97, 122,
		3, 0, 9, 10, 13, 13, 32, 32, 2, 0, 10, 10, 13, 13, 416, 0, 1, 1, 0, 0,
		0, 0, 3, 1, 0, 0, 0, 0, 5, 1, 0, 0, 0, 0, 7, 1, 0, 0, 0, 0, 9, 1, 0, 0,
		0, 0, 11, 1, 0, 0, 0, 0, 13, 1, 0, 0, 0, 0, 15, 1, 0, 0, 0, 0, 17, 1, 0,
		0, 0, 0, 19, 1, 0, 0, 0, 0, 21, 1, 0, 0, 0, 0, 23, 1, 0, 0, 0, 0, 25, 1,
		0, 0, 0, 0, 27, 1, 0, 0, 0, 0, 29, 1, 0, 0, 0, 0, 31, 1, 0, 0, 0, 0, 33,
		1, 0, 0, 0, 0, 35, 1, 0, 0, 0, 0, 37, 1, 0, 0, 0, 0, 39, 1, 0, 0, 0, 0,
		41, 1, 0, 0, 0, 0, 43, 1, 0, 0, 0, 0, 45, 1, 0, 0, 0, 0, 47, 1, 0, 0, 0,
		0, 49, 1, 0, 0, 0, 0, 51, 1, 0, 0, 0, 0, 53, 1, 0, 0, 0, 0, 55, 1, 0, 0,
		0, 0, 57, 1, 0, 0, 0, 0, 59, 1, 0, 0, 0, 0, 61, 1, 0, 0, 0, 0, 63, 1, 0,
		0, 0, 0, 65, 1, 0, 0, 0, 0, 67, 1, 0, 0, 0, 0, 69, 1, 0, 0, 0, 0, 71, 1,
		0, 0, 0, 0, 73, 1, 0, 0, 0, 0, 75, 1, 0, 0, 0, 0, 77, 1, 0, 0, 0, 0, 79,
		1, 0, 0, 0, 0, 81, 1, 0, 0, 0, 0, 83, 1, 0, 0, 0, 0, 85, 1, 0, 0, 0, 0,
		87, 1, 0, 0, 0, 0, 89, 1, 0, 0, 0, 0, 91, 1, 0, 0, 0, 0, 93, 1, 0, 0, 0,
		0, 95, 1, 0, 0, 0, 0, 97, 1, 0, 0, 0, 0, 99, 1, 0, 0, 0, 0, 101, 1, 0,
		0, 0, 0, 103, 1, 0, 0, 0, 0, 105, 1, 0, 0, 0, 0, 107, 1, 0, 0, 0, 0, 109,
		1, 0, 0, 0, 0, 111, 1, 0, 0, 0, 0, 113, 1, 0, 0, 0, 0, 115, 1, 0, 0, 0,
		1, 117, 1, 0, 0, 0, 3, 125, 1, 0, 0, 0, 5, 131, 1, 0, 0, 0, 7, 134, 1,
		0, 0, 0, 9, 141, 1, 0, 0, 0, 11, 145, 1, 0, 0, 0, 13, 151, 1, 0, 0, 0,
		15, 158, 1, 0, 0, 0, 17, 163, 1, 0, 0, 0, 19, 168, 1, 0, 0, 0, 21, 173,
		1, 0, 0, 0, 23, 177, 1, 0, 0, 0, 25, 181, 1, 0, 0, 0, 27, 188, 1, 0, 0,
		0, 29, 201, 1, 0, 0, 0, 31, 204, 1, 0, 0, 0, 33, 232, 1, 0, 0, 0, 35, 235,
		1, 0, 0, 0, 37, 245, 1, 0, 0, 0, 39, 256, 1, 0, 0, 0, 41, 260, 1, 0, 0,
		0, 43, 267, 1, 0, 0, 0, 45, 270, 1, 0, 0, 0, 47, 275, 1, 0, 0, 0, 49, 281,
		1, 0, 0, 0, 51, 285, 1, 0, 0, 0, 53, 288, 1, 0, 0, 0, 55, 295, 1, 0, 0,
		0, 57, 301, 1, 0, 0, 0, 59, 310, 1, 0, 0, 0, 61, 312, 1, 0, 0, 0, 63, 314,
		1, 0, 0, 0, 65, 316, 1, 0, 0, 0, 67, 318, 1, 0, 0, 0, 69, 320, 1, 0, 0,
		0, 71, 322, 1, 0, 0, 0, 73, 325, 1, 0, 0, 0, 75, 328, 1, 0, 0, 0, 77, 331,
		1, 0, 0, 0, 79, 334, 1, 0, 0, 0, 81, 336, 1, 0, 0, 0, 83, 339, 1, 0, 0,
		0, 85, 341, 1, 0, 0, 0, 87, 344, 1, 0, 0, 0, 89, 346, 1, 0, 0, 0, 91, 349,
		1, 0, 0, 0, 93, 352, 1, 0, 0, 0, 95, 354, 1, 0, 0, 0, 97, 356, 1, 0, 0,
		0, 99, 358, 1, 0, 0, 0, 101, 360, 1, 0, 0, 0, 103, 362, 1, 0, 0, 0, 105,
		364, 1, 0, 0, 0, 107, 366, 1, 0, 0, 0, 109, 368, 1, 0, 0, 0, 111, 371,
		1, 0, 0, 0, 113, 377, 1, 0, 0, 0, 115, 388, 1, 0, 0, 0, 117, 118, 5, 112,
		0, 0, 118, 119, 5, 114, 0, 0, 119, 120, 5, 105, 0, 0, 120, 121, 5, 110,
		0, 0, 121, 122, 5, 116, 0, 0, 122, 123, 5, 108, 0, 0, 123, 124, 5, 110,
		0, 0, 124, 2, 1, 0, 0, 0, 125, 126, 5, 112, 0, 0, 126, 127, 5, 114, 0,
		0, 127, 128, 5, 105, 0, 0, 128, 129, 5, 110, 0, 0, 129, 130, 5, 116, 0,
		0, 130, 4, 1, 0, 0, 0, 131, 132, 5, 102, 0, 0, 132, 133, 5, 110, 0, 0,
		133, 6, 1, 0, 0, 0, 134, 135, 5, 115, 0, 0, 135, 136, 5, 116, 0, 0, 136,
		137, 5, 114, 0, 0, 137, 138, 5, 117, 0, 0, 138, 139, 5, 99, 0, 0, 139,
		140, 5, 116, 0, 0, 140, 8, 1, 0, 0, 0, 141, 142, 5, 105, 0, 0, 142, 143,
		5, 110, 0, 0, 143, 144, 5, 116, 0, 0, 144, 10, 1, 0, 0, 0, 145, 146, 5,
		102, 0, 0, 146, 147, 5, 108, 0, 0, 147, 148, 5, 111, 0, 0, 148, 149, 5,
		97, 0, 0, 149, 150, 5, 116, 0, 0, 150, 12, 1, 0, 0, 0, 151, 152, 5, 115,
		0, 0, 152, 153, 5, 116, 0, 0, 153, 154, 5, 114, 0, 0, 154, 155, 5, 105,
		0, 0, 155, 156, 5, 110, 0, 0, 156, 157, 5, 103, 0, 0, 157, 14, 1, 0, 0,
		0, 158, 159, 5, 98, 0, 0, 159, 160, 5, 111, 0, 0, 160, 161, 5, 111, 0,
		0, 161, 162, 5, 108, 0, 0, 162, 16, 1, 0, 0, 0, 163, 164, 5, 99, 0, 0,
		164, 165, 5, 104, 0, 0, 165, 166, 5, 97, 0, 0, 166, 167, 5, 114, 0, 0,
		167, 18, 1, 0, 0, 0, 168, 169, 5, 118, 0, 0, 169, 170, 5, 111, 0, 0, 170,
		171, 5, 105, 0, 0, 171, 172, 5, 100, 0, 0, 172, 20, 1, 0, 0, 0, 173, 174,
		5, 108, 0, 0, 174, 175, 5, 101, 0, 0, 175, 176, 5, 110, 0, 0, 176, 22,
		1, 0, 0, 0, 177, 178, 5, 99, 0, 0, 178, 179, 5, 97, 0, 0, 179, 180, 5,
		112, 0, 0, 180, 24, 1, 0, 0, 0, 181, 182, 5, 97, 0, 0, 182, 183, 5, 112,
		0, 0, 183, 184, 5, 112, 0, 0, 184, 185, 5, 101, 0, 0, 185, 186, 5, 110,
		0, 0, 186, 187, 5, 100, 0, 0, 187, 26, 1, 0, 0, 0, 188, 189, 5, 109, 0,
		0, 189, 190, 5, 117, 0, 0, 190, 191, 5, 116, 0, 0, 191, 28, 1, 0, 0, 0,
		192, 193, 5, 116, 0, 0, 193, 194, 5, 114, 0, 0, 194, 195, 5, 117, 0, 0,
		195, 202, 5, 101, 0, 0, 196, 197, 5, 102, 0, 0, 197, 198, 5, 97, 0, 0,
		198, 199, 5, 108, 0, 0, 199, 200, 5, 115, 0, 0, 200, 202, 5, 101, 0, 0,
		201, 192, 1, 0, 0, 0, 201, 196, 1, 0, 0, 0, 202, 30, 1, 0, 0, 0, 203, 205,
		7, 0, 0, 0, 204, 203, 1, 0, 0, 0, 205, 206, 1, 0, 0, 0, 206, 204, 1, 0,
		0, 0, 206, 207, 1, 0, 0, 0, 207, 32, 1, 0, 0, 0, 208, 210, 7, 0, 0, 0,
		209, 208, 1, 0, 0, 0, 210, 211, 1, 0, 0, 0, 211, 209, 1, 0, 0, 0, 211,
		212, 1, 0, 0, 0, 212, 213, 1, 0, 0, 0, 213, 217, 5, 46, 0, 0, 214, 216,
		7, 0, 0, 0, 215, 214, 1, 0, 0, 0, 216, 219, 1, 0, 0, 0, 217, 215, 1, 0,
		0, 0, 217, 218, 1, 0, 0, 0, 218, 233, 1, 0, 0, 0, 219, 217, 1, 0, 0, 0,
		220, 222, 7, 0, 0, 0, 221, 220, 1, 0, 0, 0, 222, 225, 1, 0, 0, 0, 223,
		221, 1, 0, 0, 0, 223, 224, 1, 0, 0, 0, 224, 226, 1, 0, 0, 0, 225, 223,
		1, 0, 0, 0, 226, 228, 5, 46, 0, 0, 227, 229, 7, 0, 0, 0, 228, 227, 1, 0,
		0, 0, 229, 230, 1, 0, 0, 0, 230, 228, 1, 0, 0, 0, 230, 231, 1, 0, 0, 0,
		231, 233, 1, 0, 0, 0, 232, 209, 1, 0, 0, 0, 232, 223, 1, 0, 0, 0, 233,
		34, 1, 0, 0, 0, 234, 236, 7, 0, 0, 0, 235, 234, 1, 0, 0, 0, 236, 237, 1,
		0, 0, 0, 237, 235, 1, 0, 0, 0, 237, 238, 1, 0, 0, 0, 238, 239, 1, 0, 0,
		0, 239, 241, 5, 46, 0, 0, 240, 242, 7, 0, 0, 0, 241, 240, 1, 0, 0, 0, 242,
		243, 1, 0, 0, 0, 243, 241, 1, 0, 0, 0, 243, 244, 1, 0, 0, 0, 244, 36, 1,
		0, 0, 0, 245, 251, 5, 34, 0, 0, 246, 250, 8, 1, 0, 0, 247, 248, 5, 92,
		0, 0, 248, 250, 9, 0, 0, 0, 249, 246, 1, 0, 0, 0, 249, 247, 1, 0, 0, 0,
		250, 253, 1, 0, 0, 0, 251, 249, 1, 0, 0, 0, 251, 252, 1, 0, 0, 0, 252,
		254, 1, 0, 0, 0, 253, 251, 1, 0, 0, 0, 254, 255, 5, 34, 0, 0, 255, 38,
		1, 0, 0, 0, 256, 257, 5, 39, 0, 0, 257, 258, 9, 0, 0, 0, 258, 259, 5, 39,
		0, 0, 259, 40, 1, 0, 0, 0, 260, 264, 7, 2, 0, 0, 261, 263, 7, 3, 0, 0,
		262, 261, 1, 0, 0, 0, 263, 266, 1, 0, 0, 0, 264, 262, 1, 0, 0, 0, 264,
		265, 1, 0, 0, 0, 265, 42, 1, 0, 0, 0, 266, 264, 1, 0, 0, 0, 267, 268, 5,
		105, 0, 0, 268, 269, 5, 102, 0, 0, 269, 44, 1, 0, 0, 0, 270, 271, 5, 101,
		0, 0, 271, 272, 5, 108, 0, 0, 272, 273, 5, 115, 0, 0, 273, 274, 5, 101,
		0, 0, 274, 46, 1, 0, 0, 0, 275, 276, 5, 119, 0, 0, 276, 277, 5, 104, 0,
		0, 277, 278, 5, 105, 0, 0, 278, 279, 5, 108, 0, 0, 279, 280, 5, 101, 0,
		0, 280, 48, 1, 0, 0, 0, 281, 282, 5, 102, 0, 0, 282, 283, 5, 111, 0, 0,
		283, 284, 5, 114, 0, 0, 284, 50, 1, 0, 0, 0, 285, 286, 5, 105, 0, 0, 286,
		287, 5, 110, 0, 0, 287, 52, 1, 0, 0, 0, 288, 289, 5, 114, 0, 0, 289, 290,
		5, 101, 0, 0, 290, 291, 5, 116, 0, 0, 291, 292, 5, 117, 0, 0, 292, 293,
		5, 114, 0, 0, 293, 294, 5, 110, 0, 0, 294, 54, 1, 0, 0, 0, 295, 296, 5,
		98, 0, 0, 296, 297, 5, 114, 0, 0, 297, 298, 5, 101, 0, 0, 298, 299, 5,
		97, 0, 0, 299, 300, 5, 107, 0, 0, 300, 56, 1, 0, 0, 0, 301, 302, 5, 99,
		0, 0, 302, 303, 5, 111, 0, 0, 303, 304, 5, 110, 0, 0, 304, 305, 5, 116,
		0, 0, 305, 306, 5, 105, 0, 0, 306, 307, 5, 110, 0, 0, 307, 308, 5, 117,
		0, 0, 308, 309, 5, 101, 0, 0, 309, 58, 1, 0, 0, 0, 310, 311, 5, 43, 0,
		0, 311, 60, 1, 0, 0, 0, 312, 313, 5, 45, 0, 0, 313, 62, 1, 0, 0, 0, 314,
		315, 5, 42, 0, 0, 315, 64, 1, 0, 0, 0, 316, 317, 5, 47, 0, 0, 317, 66,
		1, 0, 0, 0, 318, 319, 5, 37, 0, 0, 319, 68, 1, 0, 0, 0, 320, 321, 5, 33,
		0, 0, 321, 70, 1, 0, 0, 0, 322, 323, 5, 124, 0, 0, 323, 324, 5, 124, 0,
		0, 324, 72, 1, 0, 0, 0, 325, 326, 5, 38, 0, 0, 326, 327, 5, 38, 0, 0, 327,
		74, 1, 0, 0, 0, 328, 329, 5, 61, 0, 0, 329, 330, 5, 61, 0, 0, 330, 76,
		1, 0, 0, 0, 331, 332, 5, 33, 0, 0, 332, 333, 5, 61, 0, 0, 333, 78, 1, 0,
		0, 0, 334, 335, 5, 60, 0, 0, 335, 80, 1, 0, 0, 0, 336, 337, 5, 60, 0, 0,
		337, 338, 5, 61, 0, 0, 338, 82, 1, 0, 0, 0, 339, 340, 5, 62, 0, 0, 340,
		84, 1, 0, 0, 0, 341, 342, 5, 62, 0, 0, 342, 343, 5, 61, 0, 0, 343, 86,
		1, 0, 0, 0, 344, 345, 5, 61, 0, 0, 345, 88, 1, 0, 0, 0, 346, 347, 5, 43,
		0, 0, 347, 348, 5, 43, 0, 0, 348, 90, 1, 0, 0, 0, 349, 350, 5, 45, 0, 0,
		350, 351, 5, 45, 0, 0, 351, 92, 1, 0, 0, 0, 352, 353, 5, 58, 0, 0, 353,
		94, 1, 0, 0, 0, 354, 355, 5, 40, 0, 0, 355, 96, 1, 0, 0, 0, 356, 357, 5,
		41, 0, 0, 357, 98, 1, 0, 0, 0, 358, 359, 5, 91, 0, 0, 359, 100, 1, 0, 0,
		0, 360, 361, 5, 123, 0, 0, 361, 102, 1, 0, 0, 0, 362, 363, 5, 93, 0, 0,
		363, 104, 1, 0, 0, 0, 364, 365, 5, 125, 0, 0, 365, 106, 1, 0, 0, 0, 366,
		367, 5, 46, 0, 0, 367, 108, 1, 0, 0, 0, 368, 369, 5, 44, 0, 0, 369, 110,
		1, 0, 0, 0, 370, 372, 7, 4, 0, 0, 371, 370, 1, 0, 0, 0, 372, 373, 1, 0,
		0, 0, 373, 371, 1, 0, 0, 0, 373, 374, 1, 0, 0, 0, 374, 375, 1, 0, 0, 0,
		375, 376, 6, 55, 0, 0, 376, 112, 1, 0, 0, 0, 377, 378, 5, 47, 0, 0, 378,
		379, 5, 47, 0, 0, 379, 383, 1, 0, 0, 0, 380, 382, 8, 5, 0, 0, 381, 380,
		1, 0, 0, 0, 382, 385, 1, 0, 0, 0, 383, 381, 1, 0, 0, 0, 383, 384, 1, 0,
		0, 0, 384, 386, 1, 0, 0, 0, 385, 383, 1, 0, 0, 0, 386, 387, 6, 56, 0, 0,
		387, 114, 1, 0, 0, 0, 388, 389, 5, 47, 0, 0, 389, 390, 5, 42, 0, 0, 390,
		394, 1, 0, 0, 0, 391, 393, 9, 0, 0, 0, 392, 391, 1, 0, 0, 0, 393, 396,
		1, 0, 0, 0, 394, 395, 1, 0, 0, 0, 394, 392, 1, 0, 0, 0, 395, 397, 1, 0,
		0, 0, 396, 394, 1, 0, 0, 0, 397, 398, 5, 42, 0, 0, 398, 399, 5, 47, 0,
		0, 399, 400, 1, 0, 0, 0, 400, 401, 6, 57, 0, 0, 401, 116, 1, 0, 0, 0, 16,
		0, 201, 206, 211, 217, 223, 230, 232, 237, 243, 249, 251, 264, 373, 383,
		394, 1, 6, 0, 0,
	}
	deserializer := antlr.NewATNDeserializer(nil)
	staticData.atn = deserializer.Deserialize(staticData.serializedATN)
	atn := staticData.atn
	staticData.decisionToDFA = make([]*antlr.DFA, len(atn.DecisionToState))
	decisionToDFA := staticData.decisionToDFA
	for index, state := range atn.DecisionToState {
		decisionToDFA[index] = antlr.NewDFA(state, index)
	}
}

// VlangLexerInit initializes any static state used to implement VlangLexer. By default the
// static state used to implement the lexer is lazily initialized during the first call to
// NewVlangLexer(). You can call this function if you wish to initialize the static state ahead
// of time.
func VlangLexerInit() {
	staticData := &VlangLexerLexerStaticData
	staticData.once.Do(vlanglexerLexerInit)
}

// NewVlangLexer produces a new lexer instance for the optional input antlr.CharStream.
func NewVlangLexer(input antlr.CharStream) *VlangLexer {
	VlangLexerInit()
	l := new(VlangLexer)
	l.BaseLexer = antlr.NewBaseLexer(input)
	staticData := &VlangLexerLexerStaticData
	l.Interpreter = antlr.NewLexerATNSimulator(l, staticData.atn, staticData.decisionToDFA, staticData.PredictionContextCache)
	l.channelNames = staticData.ChannelNames
	l.modeNames = staticData.ModeNames
	l.RuleNames = staticData.RuleNames
	l.LiteralNames = staticData.LiteralNames
	l.SymbolicNames = staticData.SymbolicNames
	l.GrammarFileName = "Vlang.g4"
	// TODO: l.EOF = antlr.TokenEOF

	return l
}

// VlangLexer tokens.
const (
	VlangLexerT__0          = 1
	VlangLexerT__1          = 2
	VlangLexerT__2          = 3
	VlangLexerT__3          = 4
	VlangLexerT__4          = 5
	VlangLexerT__5          = 6
	VlangLexerT__6          = 7
	VlangLexerT__7          = 8
	VlangLexerT__8          = 9
	VlangLexerT__9          = 10
	VlangLexerLEN           = 11
	VlangLexerCAP           = 12
	VlangLexerAPPEND        = 13
	VlangLexerMUT           = 14
	VlangLexerBOOLEANO      = 15
	VlangLexerENTERO        = 16
	VlangLexerFLOAT         = 17
	VlangLexerDECIMAL       = 18
	VlangLexerCADENA        = 19
	VlangLexerCARACTER      = 20
	VlangLexerID            = 21
	VlangLexerIF_KW         = 22
	VlangLexerELSE_KW       = 23
	VlangLexerWHILE_KW      = 24
	VlangLexerFOR_KW        = 25
	VlangLexerIN_KW         = 26
	VlangLexerRETURN_KW     = 27
	VlangLexerBREAK_KW      = 28
	VlangLexerCONTINUE_KW   = 29
	VlangLexerPLUS          = 30
	VlangLexerMINUS         = 31
	VlangLexerMUL           = 32
	VlangLexerDIV           = 33
	VlangLexerMOD           = 34
	VlangLexerNOT           = 35
	VlangLexerOR            = 36
	VlangLexerAND           = 37
	VlangLexerEQ            = 38
	VlangLexerNEQ           = 39
	VlangLexerLT            = 40
	VlangLexerLE            = 41
	VlangLexerGT            = 42
	VlangLexerGE            = 43
	VlangLexerASSIGN        = 44
	VlangLexerINC           = 45
	VlangLexerDEC           = 46
	VlangLexerCOLON         = 47
	VlangLexerLPAREN        = 48
	VlangLexerRPAREN        = 49
	VlangLexerLBRACK        = 50
	VlangLexerLCOR          = 51
	VlangLexerRBRACK        = 52
	VlangLexerRCOR          = 53
	VlangLexerDOT           = 54
	VlangLexerCOMMA         = 55
	VlangLexerWS            = 56
	VlangLexerLINE_COMMENT  = 57
	VlangLexerBLOCK_COMMENT = 58
)
